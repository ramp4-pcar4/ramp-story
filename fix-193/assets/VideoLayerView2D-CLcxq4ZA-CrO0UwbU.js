import{ar as I,bi as v,d$ as $,d_ as q,e0 as U,aA as F,ah as M,aL as b,v as C,S as V,i as k,au as j,aF as B,L as J,hT as K,l as N,as as z,w as R}from"./story-BXuU6Aew.js";import Z from"./GraphicsLayer-DfeGaYc1-BtT50Qpu.js";import{a as W}from"./TelemetryDisplay-Bq2PXfI8-ikrh2eAi.js";import{A as Q}from"./OverlayContainer-BEHcBpu0-BwSh7YMn.js";import{o as tt}from"./vec2f64-CeODonrJ-CkkJCdRC.js";import{K as g}from"./projection-BA9M1R7d-D6pRMyL8.js";import{T as et}from"./Container-BcuL1ZEG-QSfGx-CW.js";import{X as it,A as rt,Y as st}from"./LayerView-Bish-E63-CJysIgaz.js";import{G as ot}from"./enums-DBi1-Mm2-CUS1pvQe.js";import{H as nt,V as at}from"./Texture-BCt2hphT-BkjJFALT.js";import{d as lt}from"./GraphicContainer-DuOHUciE-_r9SaWCT.js";import{X as mt}from"./GraphicsView2D-C4wYE2ut-D3yIqBG1.js";import"./main-CQNsJjbK.js";import"./GraphicsCollection-CWTXNZOX-Q3gMrXeO.js";import"./Layer-ChoECxvZ-CWwwsum6.js";import"./TimeExtent-Cn0Jofqr-DCPC8P7Y.js";import"./BlendLayer-D1WkSmwP-BDd5orZy.js";import"./jsonUtils-wIllKWI4-C-UfqUeM.js";import"./parser-DyDJ-rlI-ehwhcJbF.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-DX7gBViE-B86HLgaj.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./ScaleRangeLayer-Bz0DcnvM-Bn0onCc3.js";import"./ElevationInfo-yv2-9tj6-BESH5d2f.js";import"./lengthUtils-DKpMe5qR-v-bv1D3F.js";import"./mat3-CC4Foazl-BWjyqE2v.js";import"./MapView-BGOJJ8ch-C7cmPOC7.js";import"./Cyclical-C_9rKUUQ-CbI98WKt.js";import"./CollectionFlattener-DkHuHn5E-Cmh_lodV.js";import"./workers-PiCjreoO-ClsUvlEY.js";import"./TileInfo-CWIRDhZl-B6mWbjnU.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./themeUtils-YjM7iIiX-jdxgf6e5.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./UpdatingHandles-CUu3u1ms-Ck4u4Sh1.js";import"./signal-CETehA7D-BTKE9-Wa.js";import"./Map-1zd11DKO-D8ZnFJtb.js";import"./Basemap-BEqqSTw9-ZIf3Mmy1.js";import"./loadAll-e978YItg-D3XdAl9s.js";import"./PortalItem-CctGdnxF-CDGGX4bZ.js";import"./writeUtils-D5qlLkwk-RUDQxMOu.js";import"./compilerUtils-CV1QYWI8-R0VjXkbr.js";import"./TablesMixin-C8RojhYs-BoHsMrOJ.js";import"./HeightModelInfo-C5vFqzyF-DXIwUe4x.js";import"./ReactiveMap-CFk6jPfN-D8ROr-m4.js";import"./Query-BrwMGK8U-WwUrQCzg.js";import"./Field-C6hA1tZj-CAMN4Olx.js";import"./fieldType-CD2CL2hr-cmd8IMFo.js";import"./arcgisLayerUrl-HNYh8jvG-DjCdYtjZ.js";import"./ViewingMode-CyR_b1T8-_s7_Gbsk.js";import"./vec2-tHZ6OaOy-xCj1obDt.js";import"./Tile-D75RMC64-D1fikf64.js";import"./TileKey-C5IL-JBr-C4u-H-YI.js";import"./QueueProcessor-DbfV9fLy-WjcNG61v.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./normalizeUtils-Bxmy9MNI-BymMe95E.js";import"./normalizeUtilsCommon-CRJlkfEA-vTDdtOUY.js";import"./utils-9sQxfkoa-DONXkXa8.js";import"./utils-Bq23Xwmj-BgELbzLd.js";import"./vec2f32-CVhmN3Me-DxoqVD7C.js";import"./unitBezier-CGtWxaCq-BRwEDigF.js";import"./Scheduler-B7UX7Wr5-DMtG2tn0.js";import"./vec32-D9GsKZ1t-ByoUV7Yr.js";import"./definitions-DJSdSb77-DkoRHaVx.js";import"./imageUtils-BA2D6Uf1-Ds2HXc3c.js";import"./capabilities-agoTWNzb-CtsNgRyk.js";import"./Version-CoKzbupV-D7tkWMDH.js";import"./ColorBackground-gVZldRLm-CFdUmXCg.js";import"./projectBuffer-CvCBvJ6W-CjoMYM8p.js";import"./vec3f32-BS0cezmI-B_madU1n.js";import"./WGLContainer-LxgEo4I_-DYY2V_Qg.js";import"./LabelMetric-BeluzH3o-GLLRlokj.js";import"./enums-CpSG_SL3-BMD3Tb1v.js";import"./Program-DLVwTiPA-DmQcIKJ_.js";import"./BufferObject-BM_7mcDb-DXfREROK.js";import"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";import"./VertexArrayObject-M4iRGGoi-4u8cr3Be.js";import"./ProgramTemplate-DQOm6Omy-CX_0HTkk.js";import"./StyleDefinition-Ct4HIk9T-B82pTf0h.js";import"./config-nuMERBvb-MDUrh2eL.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./featureConversionUtils-D6hFQ4Af-CHlhThaE.js";import"./OptimizedFeature-EIithYlr-Cq64mIT3.js";import"./OptimizedFeatureSet-DfZGBuxJ-C08BOAgi.js";import"./FeatureCommandQueue-DzV-HBIG-71Ht4EaI.js";import"./UpdateTracking2D-Du_WIf4G-BUyeFVcD.js";import"./BidiEngine-Bdqv5H5j-Dyqh9XG-.js";import"./GeometryUtils-NHgB9gGQ-BybO2C7g.js";import"./utils-SPbpQbmm-DCVD-KTi.js";import"./Rect-DD6XS68q-D_hsV3ag.js";import"./BindType-9iOk18Ed-CRW1cdX4.js";import"./Util-BjGjeg6f-08Szkf4F.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-hf2nxvhQ-CaAr8PTM.js";import"./constants-Bqe1QJ4u-F8oTIn7N.js";import"./layerViewUtils-DURAPenP-BX95br06.js";import"./AGraphicContainer-LUCT6Gle-BLe1l7ht.js";import"./TechniqueInstance-DGTKoOL6-BLJOZ8B3.js";import"./TileContainer-D48pXXgL-CBNNCHiu.js";import"./FieldsIndex-HmzMbJQG-Bx5vZEhT.js";import"./UnknownTimeZone-C--TOcPG-BRVCsmks.js";import"./OverrideHelper-DWRbVlj1-BqtM2B4_.js";import"./colorUtils-Cthpxcks--LGR8pXh.js";import"./quantizationUtils-bJy1cRwp-D6iCvOc6.js";import"./AttributeStore-DjyP9U7y-5D8qiTOP.js";import"./TimeOnly-DSMefxKy-BsAD3ln9.js";import"./timeSupport-jPViR5jn-DOvVz1i2.js";import"./queryUtils-Brxu6254-D3qm_B5-.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./labelUtils-BW14kBqX-DxvZU2qF.js";import"./diffUtils-Cz3Fi8Xb-DI7ffnC9.js";import"./normalizeUtilsSync-CBU7m8rm-DUVusw-U.js";const x=2;class ht extends et{constructor(t){super(),this.element=t,this._handles=new j,this.isWrapAround=!1,this.perspectiveTransform=tt(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(B(()=>this.element,()=>{const e=this.element;this.ready(),e&&this._handles.add(J(e,"play",()=>this.requestRender()))},b))}getMesh(t){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=K(this.texture)}get textureSize(){if(!this.texture)return[1,1];const t=this.texture.descriptor;return[t.width,t.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(t){const e=this.element;if(e==null)return;const{context:s}=t,{videoWidth:a,videoHeight:r}=e;if(a!==0&&r!==0){if(this.texture)e.paused||this.texture.setData(e);else{const i=new nt;i.wrapMode=ot.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=r,this.texture=new at(s,i,e)}e.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(t)}}_createTransforms(){return null}updateDrawCoords(t,e,s,a){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(t,i,s);const{controlPoints:l,horizon:h}=i,m=Math.sqrt(l.length),p=m,{x:o,y}=t,u=this._vertices,T=l[0],G=l[m-1],X=l[(p-1)*m],Y=l[(p-1)*m+m-1],O=g(h?h[0].mapPoint:T.mapPoint,s),P=g(h?h[1].mapPoint:G.mapPoint,s),f=g(X.mapPoint,s),L=g(Y.mapPoint,s);this.clipGeometry=h?new rt({geometry:N.fromJSON({rings:[[[f.x,f.y],[L.x,L.y],[P.x,P.y],[O.x,O.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const D=l[c],{sourcePoint:S,mapPoint:A}=D;if(S==null||A==null)continue;const w=g(A,s);u[c*x+0]=w.x-o,u[c*x+1]=w.y-y}let E=e;if(a){const c=Math.min(O.x,P.x,f.x,L.x),D=Math.max(O.x,P.x,f.x,L.x),{worldWidth:S,xBounds:A}=a,[w,H]=A;c<w&&D>w?E=S:D>H&&c<H&&(E=-S)}this.wrapAroundShift=E,this.isWrapAround=E!==0}draw(t,e){this.isReady&&this._vertices&&this._indices&&this._texCoords?e.render(t,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(t,e,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=e,r=Math.sqrt(a.length),i=r,l=new Float32Array(x*a.length),h=new Uint16Array(2*a.length);for(let o=0;o<a.length;o++){const y=a[o],{sourcePoint:u,mapPoint:T}=y;if(u==null||T==null)continue;const G=g(T,s);l[o*x+0]=G.x-t.x,l[o*x+1]=G.y-t.y,h[2*o+0]=u.x,h[2*o+1]=u.y}const m=new Uint16Array(i*r+(i-2)*(r+2));let p=0;for(let o=0;o<i;o++){for(let y=0;y<r;y++)m[p++]=o*r+y,m[p++]=(o+1)*r+y;o<i-2&&(m[p++]=(o+1)*r+(r-1),m[p++]=(o+1)*r)}this._vertices=l,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const t=this._getFrameControlPoints(),e=this.frameHorizonPoints;let s=null;if(e){const a=e.startX,r=e.startY,i=e.endX,l=e.endY;s=[{sourcePoint:z(a,r),mapPoint:new R(e.startLongitude,e.startLatitude)},{sourcePoint:z(i,l),mapPoint:new R(e.endLongitude,e.endLatitude)}]}return{controlPoints:t,horizon:s}}_getFrameControlPoints(){const t=this.groundControlPoints,e=t?.length;if(!e)return[];const s=new Array(e),a=Math.max(...t.map(({x:i})=>i)),r=this.element.videoWidth/a;for(let i=0;i<e;i++){const{x:l,y:h,lat:m,lon:p}=t[i];s[i]={sourcePoint:z(l*r,-h*r),mapPoint:new R(p,m)}}return s}}const _=new I([255,127,0]);let d=class extends it(st){constructor(){super(...arguments),this._graphicsLayer=new Z,this._frameOutlineGraphic=new v({symbol:new $({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new v({symbol:new q({color:_})}),this._lineOfSightGraphic=new v({symbol:new q({color:_})}),this._sensorLocationGraphic=new v({symbol:new U({color:_})}),this._frameCenterGraphic=new v({symbol:new U({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=F(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new Q,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new mt({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new lt(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),b),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=F(this.graphicsView)}supportsSpatialReference(n){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(n){this.graphicsView.processUpdate(n)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:n}=this.layer,{visibleTelemetryElements:t}=this;n&&t&&(t.frameOutline&&n.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,t.sensorTrail&&n.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,t.lineOfSight&&n.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,t.sensorLocation&&n.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,t.frameCenter&&n.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const n=new ht(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:t}=this;t?.frame?(n.frameHorizonPoints=this.layer.frameHorizonPoints,n.groundControlPoints=this.layer.groundControlPoints,n.opacity=1):n.opacity=0},b)]),this._overlayContainer.addChild(n),this.view.stage.requestRender()}};C([V()],d.prototype,"graphicsView",void 0),C([V()],d.prototype,"layer",void 0),C([V()],d.prototype,"symbolColor",void 0),C([V({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=C([k("esri.views.2d.layers.VideoLayerView2D")],d);const ui=d;export{ui as default};
