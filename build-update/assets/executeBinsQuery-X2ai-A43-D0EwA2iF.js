import{kL as c,jE as f,ki as y,h as S,du as l,kG as m,L as R,cU as g,kH as o,bv as J,aH as p}from"./story-DE9AooAy.js";import"./main-CsLUkpBy.js";function N(a){const t=a.geometry,n=a.toJSON(),e=n;let r,i,s;return t!=null&&(i=t.spatialReference,s=o(i),e.geometryType=J(t),e.geometry=JSON.stringify(t),e.inSR=s),n.outSR?(e.outSR=o(n.outSR),r=a.outSpatialReference):t&&(e.outSR=e.inSR,r=i),e.bin&&=JSON.stringify(e.bin),e.quantizationParameters&&=JSON.stringify(e.quantizationParameters),e.outStatistics&&=JSON.stringify(e.outStatistics),e.outTimeReference&&=JSON.stringify(e.outTimeReference),a.defaultSpatialReference&&p(i,r)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function O(a,t,n){return d(a,t,n)}async function d(a,t,n={}){const e=typeof a=="string"?S(a):a,r=t.geometry?[t.geometry]:[],i=await l(r,null,{signal:n.signal}),s=i?.[0];s!=null&&((t=t.clone()).geometry=s);const u=m({...e.query,f:"json",...N(t)});return R(g(e.path,"queryBins"),{...n,query:{...u,...n.query}})}async function k(a,t,n){const{data:e}=await O(f(a),c.from(t),n);return y.fromJSON(e)}export{k as executeBinsQuery};
