import{jH as p,aj as l}from"./story-DE9AooAy.js";import{G as r}from"./geometryEngineBase-DDJcGEx2-B9Hw96eo.js";import{hydratedAdapter as n}from"./hydrated-Bw6jVxCj-DrGZCQ7v.js";import"./main-CsLUkpBy.js";function i(e){const t=Array.isArray(e)?e[0].spatialReference:e.spatialReference;return t?p(l,t):l.WGS84}function w(e){return r.extendedSpatialReferenceInfo(e)}function R(e,t){return r.clip(n,i(e),e,t)}function x(e,t){return r.cut(n,i(e),e,t)}function S(e,t){return r.contains(n,i(e),e,t)}function y(e,t){return r.crosses(n,i(e),e,t)}function A(e,t,a){return r.distance(n,i(e),e,t,a)}function D(e,t){return r.equals(n,i(e),e,t)}function L(e,t){return r.intersects(n,i(e),e,t)}function T(e,t){return r.touches(n,i(e),e,t)}function V(e,t){return r.within(n,i(e),e,t)}function H(e,t){return r.disjoint(n,i(e),e,t)}function j(e,t){return r.overlaps(n,i(e),e,t)}function v(e,t,a){return r.relate(n,i(e),e,t,a)}function z(e){return r.isSimple(n,i(e),e)}function I(e){return r.simplify(n,i(e),e)}function J(e,t=!1){return r.convexHull(n,i(e),e,t)}function N(e,t){return r.difference(n,i(e),e,t)}function O(e,t){return r.symmetricDifference(n,i(e),e,t)}function P(e,t){return r.intersect(n,i(e),e,t)}function b(e,t=null){return r.union(n,i(e),e,t)}function q(e,t,a,s,c,u){return r.offset(n,i(e),e,t,a,s,c,u)}function B(e,t,a,s=!1){return r.buffer(n,i(e),e,t,a,s)}function C(e,t,a,s,c,u){return r.geodesicBuffer(n,i(e),e,t,a,s,c,u)}function E(e,t,a=!0){return r.nearestCoordinate(n,i(e),e,t,a)}function G(e,t){return r.nearestVertex(n,i(e),e,t)}function U(e,t,a,s){return r.nearestVertices(n,i(e),e,t,a,s)}function f(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent?.center??null:null}function W(e,t,a){if(e==null)throw new o;const s=e.spatialReference;if((a=a??f(e))==null)throw new o;const c=e.constructor.fromJSON(r.rotate(e,t,a));return c.spatialReference=s,c}function k(e,t){if(e==null)throw new o;const a=e.spatialReference;if((t=t??f(e))==null)throw new o;const s=e.constructor.fromJSON(r.flipHorizontal(e,t));return s.spatialReference=a,s}function F(e,t){if(e==null)throw new o;const a=e.spatialReference;if((t=t??f(e))==null)throw new o;const s=e.constructor.fromJSON(r.flipVertical(e,t));return s.spatialReference=a,s}function K(e,t,a,s){return r.generalize(n,i(e),e,t,a,s)}function M(e,t,a){return r.densify(n,i(e),e,t,a)}function Q(e,t,a,s=0){return r.geodesicDensify(n,i(e),e,t,a,s)}function X(e,t){return r.planarArea(n,i(e),e,t)}function Y(e,t){return r.planarLength(n,i(e),e,t)}function Z(e,t,a){return r.geodesicArea(n,i(e),e,t,a)}function $(e,t,a){return r.geodesicLength(n,i(e),e,t,a)}function _(e,t){return r.intersectLinesToPoints(n,i(e),e,t)}function ee(e,t){r.changeDefaultSpatialReferenceTolerance(e,t)}function te(e){r.clearDefaultSpatialReferenceTolerance(e)}class o extends Error{constructor(){super("Illegal Argument Exception")}}export{B as buffer,ee as changeDefaultSpatialReferenceTolerance,te as clearDefaultSpatialReferenceTolerance,R as clip,S as contains,J as convexHull,y as crosses,x as cut,M as densify,N as difference,H as disjoint,A as distance,D as equals,w as extendedSpatialReferenceInfo,k as flipHorizontal,F as flipVertical,K as generalize,Z as geodesicArea,C as geodesicBuffer,Q as geodesicDensify,$ as geodesicLength,P as intersect,_ as intersectLinesToPoints,L as intersects,z as isSimple,E as nearestCoordinate,G as nearestVertex,U as nearestVertices,q as offset,j as overlaps,X as planarArea,Y as planarLength,v as relate,W as rotate,I as simplify,O as symmetricDifference,T as touches,b as union,V as within};
