import{f7 as I,oR as N,jO as v,l4 as Y,om as U,n$ as q,bR as W,aU as M,iB as b,c as C,d as V,j as $,lN as B,f6 as k,b6 as J,l as K,gC as Q,gi as Z,j9 as ee,gj as te,i8 as g,a7 as ie,nf as R,a3 as z}from"./story-DE9AooAy.js";import{a as F}from"./TelemetryDisplay-C0-2h0NX-BaYt-Aze.js";import{A as re}from"./OverlayContainer-8YXsjMqg-DzvLvZm8.js";import{T as se}from"./Container-C-rqKhNk-Dyxae02C.js";import{X as oe,C as ne,Y as ae}from"./LayerView-DONYuvqR-D1uYbtvo.js";import{d as le}from"./GraphicContainer-DPQzFmqj-H_iGWEWE.js";import{X as he}from"./GraphicsView2D-DGP_h330-zRsVL_dx.js";import"./main-CsLUkpBy.js";import"./vec3f32-BS0cezmI-B_madU1n.js";import"./WGLContainer-whJgsi2t-CGq78sXN.js";import"./LabelMetric-DpMX58iW-IB5VzNkd.js";import"./Program-1XjJitsM-EcoGUBaj.js";import"./BufferObject-DqJSjWFs-BhAkLLcP.js";import"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";import"./VertexArrayObject-C4kjI814-BP6Di09J.js";import"./ProgramTemplate-B_NcbdFz-Q2ML1liD.js";import"./StyleDefinition-CovmM7Ch-Cdj37yeO.js";import"./config-nuMERBvb-MDUrh2eL.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./FeatureCommandQueue-F8dH-mVd-P46-EUD1.js";import"./UpdateTracking2D-swFQJIjy-DrSp7uUZ.js";import"./BidiEngine-Bdqv5H5j-Dyqh9XG-.js";import"./GeometryUtils-v59R1Z6F-CHOfVRFe.js";import"./Rect-DD6XS68q-D_hsV3ag.js";import"./BindType-9iOk18Ed-CRW1cdX4.js";import"./Util-cAlFLh9R-CyPLXCS2.js";import"./constants-Bqe1QJ4u-F8oTIn7N.js";import"./layerViewUtils-DyE3oc1e-CYjDhqwq.js";import"./AGraphicContainer-aPpZ1eAs-Dz-23LA8.js";import"./TechniqueInstance-DBGJNG3B-28gQqNgE.js";import"./TileContainer-C5yGwaDr-CIMkIbQf.js";import"./AttributeStore-BysBgiw_-DOstyQDT.js";import"./TimeOnly-BR6daUyu-B3p4ZLHW.js";import"./timeSupport-sB9XTwIv-h3cwKcJ2.js";import"./normalizeUtilsSync-BGR0Mvo7-Jx1rU3Tk.js";const x=2;class me extends se{constructor(e){super(),this.element=e,this._handles=new B,this.isWrapAround=!1,this.perspectiveTransform=k(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(J(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(K(t,"play",()=>this.requestRender()))},b))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=Q(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:s}=e,{videoWidth:a,videoHeight:r}=t;if(a!==0&&r!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new Z;i.wrapMode=ee.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=r,this.texture=new te(s,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,s,a){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(e,i,s);const{controlPoints:l,horizon:m}=i,h=Math.sqrt(l.length),p=h,{x:o,y}=e,u=this._vertices,T=l[0],G=l[h-1],X=l[(p-1)*h],j=l[(p-1)*h+h-1],O=g(m?m[0].mapPoint:T.mapPoint,s),P=g(m?m[1].mapPoint:G.mapPoint,s),f=g(X.mapPoint,s),L=g(j.mapPoint,s);this.clipGeometry=m?new ne({geometry:ie.fromJSON({rings:[[[f.x,f.y],[L.x,L.y],[P.x,P.y],[O.x,O.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const D=l[c],{sourcePoint:E,mapPoint:A}=D;if(E==null||A==null)continue;const w=g(A,s);u[c*x+0]=w.x-o,u[c*x+1]=w.y-y}let S=t;if(a){const c=Math.min(O.x,P.x,f.x,L.x),D=Math.max(O.x,P.x,f.x,L.x),{worldWidth:E,xBounds:A}=a,[w,H]=A;c<w&&D>w?S=E:D>H&&c<H&&(S=-E)}this.wrapAroundShift=S,this.isWrapAround=S!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=t,r=Math.sqrt(a.length),i=r,l=new Float32Array(x*a.length),m=new Uint16Array(2*a.length);for(let o=0;o<a.length;o++){const y=a[o],{sourcePoint:u,mapPoint:T}=y;if(u==null||T==null)continue;const G=g(T,s);l[o*x+0]=G.x-e.x,l[o*x+1]=G.y-e.y,m[2*o+0]=u.x,m[2*o+1]=u.y}const h=new Uint16Array(i*r+(i-2)*(r+2));let p=0;for(let o=0;o<i;o++){for(let y=0;y<r;y++)h[p++]=o*r+y,h[p++]=(o+1)*r+y;o<i-2&&(h[p++]=(o+1)*r+(r-1),h[p++]=(o+1)*r)}this._vertices=l,this._texCoords=m,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let s=null;if(t){const a=t.startX,r=t.startY,i=t.endX,l=t.endY;s=[{sourcePoint:R(a,r),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:R(i,l),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:s}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const s=new Array(t),a=Math.max(...e.map(({x:i})=>i)),r=this.element.videoWidth/a;for(let i=0;i<t;i++){const{x:l,y:m,lat:h,lon:p}=e[i];s[i]={sourcePoint:R(l*r,-m*r),mapPoint:new z(p,h)}}return s}}const _=new I([255,127,0]);let d=class extends oe(ae){constructor(){super(...arguments),this._graphicsLayer=new N,this._frameOutlineGraphic=new v({symbol:new Y({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new v({symbol:new U({color:_})}),this._lineOfSightGraphic=new v({symbol:new U({color:_})}),this._sensorLocationGraphic=new v({symbol:new q({color:_})}),this._frameCenterGraphic=new v({symbol:new q({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=W(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new F({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new re,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new he({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new le(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),b),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=W(this.graphicsView)}supportsSpatialReference(n){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(n){this.graphicsView.processUpdate(n)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:n}=this.layer,{visibleTelemetryElements:e}=this;n&&e&&(e.frameOutline&&n.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&n.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&n.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&n.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&n.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const n=new me(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e?.frame?(n.frameHorizonPoints=this.layer.frameHorizonPoints,n.groundControlPoints=this.layer.groundControlPoints,n.opacity=1):n.opacity=0},b)]),this._overlayContainer.addChild(n),this.view.stage.requestRender()}};C([V()],d.prototype,"graphicsView",void 0),C([V()],d.prototype,"layer",void 0),C([V()],d.prototype,"symbolColor",void 0),C([V({type:F})],d.prototype,"visibleTelemetryElements",void 0),d=C([$("esri.views.2d.layers.VideoLayerView2D")],d);const Ye=d;export{Ye as default};
