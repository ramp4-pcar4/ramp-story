import{D as s,q as m,am as p}from"./story-u82SUoyt.js";import{o as n}from"./MeshVertexAttributes-D9RxS-0O-CI5lEMmt.js";import{L as c}from"./vertexSpaceConversion-J1a6a3Ka-BXJ8RT2Z.js";import"./main-CmCzAIzx.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./mat4f64-Dn1WEGBx-C99QVUMW.js";import"./spatialReferenceEllipsoidUtils-a1l2O8Wm-BmysMxF9.js";import"./computeTranslationToOriginAndRotation-DlPeD1c9-C88kET92.js";import"./projectPointToVector-D1BQGAFG-DqQVROWc.js";import"./meshVertexSpaceUtils-VVkhP71b-BcqfT28l.js";import"./MeshLocalVertexSpace-DkOk3052-DA9z6oPs.js";import"./vec3-DeYubiaN-D3RW1UAQ.js";import"./BufferView-BDYk8Sh_-DwYlLv74.js";import"./vec4-DamUQeRS-CGfCsF6l.js";async function L(r,t,o){await Promise.resolve(),s(o);const e=c(r,t,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=r.cloneAndModifyVertexAttributes(new n({...e,uv:p(r.vertexAttributes.uv),color:p(r.vertexAttributes.color)}),t);return i.transform=null,i}export{L as convertMeshVertexSpace};
